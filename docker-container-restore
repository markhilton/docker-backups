#!/bin/bash

## verify if environment file exist
cd "$(dirname "$0")"

if [ ! -f .env ]; then echo 'ERROR: missing .env file'; exit 0; fi

## load environment variables
. ./.env

echo ''

## verify if required environment variables exist
if [ -z ${S3_BUCKET+x} ]  ; then echo "ERROR: S3_BUCKET is not set.    Aborting."; exit 1; fi
if [ -z ${GC_BUCKET+x} ]  ; then echo "ERROR: GC_BUCKET is not set.    Aborting."; exit 1; fi
if [ -z ${SERVICE+x} ]    ; then echo "ERROR: SERVICE is not set.      Aborting."; exit 1; fi
if [ -z ${TMP_STORAGE+x} ]; then echo "ERROR: TMP_STORAGE is not set.  Aborting."; exit 1; fi

## verify environment is OK
command -v docker > /dev/null 2>&1 || { echo "ERROR: docker not installed.    Aborting." >&2; exit 1; }
command -v aws    > /dev/null 2>&1 || { echo "ERROR: aws CLI not installed.   Aborting." >&2; exit 1; }
command -v gsutil > /dev/null 2>&1 || { echo "ERROR: gsutil not installed.    Aborting." >&2; exit 1; }

## verify if container name is provided as an argument
if [[ $# -eq 0 ]] ; then
    echo 'ERROR: missing container name'
    echo 'usage: docker-container-restore container_name [port_to_expose] [--date: YYYY-MM-DD]'
    echo ''
    exit 1
fi

## backup date
BACKUP_DATE="$(date "+%Y-%m-%d")"


## utilize selected storage service to retrieve backup from
if [ "$SERVICE" == "amazon" ] ; then
    CHECK=$(aws s3 ls s3://$S3_BUCKET/$1-$BACKUP_DATE.gz | wc -l)

    if [ $CHECK -eq 0 ] ; then echo "ERROR: requested backup does not exit.  Aborting."; exit 1; fi

    aws s3 cp s3://$S3_BUCKET/$1-$BACKUP_DATE.gz $TMP_STORAGE/$1.gz
else 
    gsutil stat gs://$GC_BUCKET/$1-$BACKUP_DATE.gz
    gsutil cp gs://$GC_BUCKET/$1-$BACKUP_DATE.gz $TMP_STORAGE/$1.gz
fi

## import docker container
zcat /$1.gz | docker import - $1

## run container if port provided
if [[ $# -eq 2 ]] ; then
    docker run -p $2:80 --name $1 -h $1 -dti $1 /bin/bash
    rm -f $TMP_STORAGE/$1.gz
fi
